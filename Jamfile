# Echo [ SHELL "./write_version.sh" ] ; # runs the script from Jamfile dir /not Jamroot dir/
# ^ in Jamroot /must be run before loading of this file/

import notfile ;

import python ;
if ! [ python.configured ]
{
    ECHO "notice: no Python configured in user-config.jam" ;
    ECHO "notice: will use default configuration" ;
    using python ;
}

path-constant MYPROJECT_ROOT : . ;
path-constant TOP : . ;

# required for coveralls
variant coverage : <cxxflags>--coverage <linkflags>--coverage ;
# following extends existing debug variant to my_profile variant (there are predefined 'profile' and 'debug-python' variants)
variant my_profile : debug : <optimization>speed <inlining>on <profiling>on ;

import boost ;
boost.use-project ;
  
project 
        : usage-requirements 
                <include>.
                <implicit-dependency>/boost//headers
                #TODO <host-os>darwin:<cxxflags>"-std=c++1y "
        : requirements
        <library>/boost//unit_test_framework
        #        <dependency>/boost//headers # <= THIS _ALWAYS_ REBUILDS TARGETS even if up to date
        <implicit-dependency>/boost//headers
                <host-os>linux:<cxxflags>"-std=c++1z " 
                <host-os>windows:<cxxflags>"-std=c++1z " 
                <host-os>darwin:<cxxflags>"-std=c++1y "
                <include>EIGEN <include>GSL/gsl
                #<linkflags>"-lcholmod -lmetis -lamd -lcamd -lccolamd -lcolamd -llapack -lgfortran -lblas "
        :
                source-location src 
;

if $(UNIX)
{
	Echo [ SHELL "date +'%D %T'" ] ;
}

test-suite  moja-swita
    : 
      [ run multidim_ball_corners.cpp ]
      [ run quiz_aliasing.cpp ]
      [ run test_Eigen_QR.cpp ]
      [ run test_enum_bit_op.cpp ]
;

#alias simple_match : : : :  <include>../c++/simple_match/include ;
#run test_simple_match.cpp simple_match : : : ;

run strict_aliasing.c : <optimization>speed ;
# optimization speed space off

# different alternatives/rules for different toolsets
run tmpl_alias_overload.cpp : <toolset>clang ;  
alias tmpl_alias_overload : : <toolset>gcc ; 
alias tmpl_alias_overload : : <toolset>msvc ; 

alias agregate_initialization : : <toolset>clang ; 
alias agregate_initialization : : <toolset>gcc ; 
alias agregate_initialization : : <toolset>msvc ; 
run agregate_initialization.cpp : <toolset>clang-3.9 ; 
run agregate_initialization.cpp : <toolset>clang-4.0 ; 


alias test_concepts : : <toolset>clang ; 
alias test_concepts : : <toolset>msvc ; 
alias test_concepts : : <toolset>gcc ; 
run test_concepts.cpp : <cxxflags>"-fconcepts " <toolset>gcc-6 ; 

#alias test_auto_cpp17 : : <toolset>msvc ;
run test_auto_cpp17.cpp : <toolset>gcc ; 
alias test_auto_cpp17 : : <toolset>msvc ;
alias test_auto_cpp17 : : <toolset>clang ;

# run accepts multiply modules, the first one is the name of the target
#TODO run test_GSL.cpp test_GSL_bounds.cpp test_GSL_span.cpp ;
unit-test test_GSL : test_GSL.cpp : <toolset>msvc ;
unit-test test_GSL : test_GSL.cpp test_GSL_bounds.cpp : <toolset>gcc ;
unit-test test_GSL : test_GSL.cpp test_GSL_bounds.cpp : <toolset>clang ;
compile-fail test_GSL_bounds.cpp : <define>CONFIRM_COMPILATION_ERRORS ; 
compile-fail test_GSL_span.cpp : <define>CONFIRM_COMPILATION_ERRORS ;

run ret_mult_values.cpp : <toolset>gcc-6 ; 
alias ret_mult_values : : <toolset>clang ; 
alias ret_mult_values : : <toolset>msvc ; 

run tmpl_inst.cpp 
    : #args * 
    : #input-files * 
    : #requirements * 
        <host-os>linux:<cxxflags>"`pkg-config --cflags dbus-1`"
        <host-os>linux:<linkflags>"`pkg-config --libs dbus-1`"
    : #target-name ?
    : #default-build * 
;

unit-test test_dispatcher : test_dispatcher.cpp auto_tie.cpp ; # /site-config//zlib /site-config//librt /site-config//crypto /site-config//ssl

unit-test cpp17clang :  cpp17tests.cpp 17/structured_bindings.cpp : <toolset>clang-4.0 ;
alias cpp17clang : : <toolset>msvc ; 
alias cpp17clang : : <toolset>gcc ; 
alias cpp17clang : : <toolset>clang ; 

unit-test cpp17tests : 
  cpp17tests.cpp 17/nested_ns.cpp 17/fold.cpp 17/lambda_utils.cpp  17/concept.cpp
  #17/if_and_switch_Init.cpp 
  17/constexpr_if.cpp
  # 17/clamp.cpp
 : <cxxflags>"-fconcepts " <toolset>gcc-6 #reqs
;
alias cpp17tests : : <toolset>gcc ;
alias cpp17tests : : <toolset>clang ;
alias cpp17tests : : <toolset>msvc ;

rule explicit-unit-test ( target : source : properties * )
{
    unit-test $(target) : $(source) : $(properties) ;
    explicit $(target) ;
}
explicit-unit-test test_bind : test_bind.cpp 
    : <testing.launcher>"valgrind --leak-check=full --show-leak-kinds=all " # -v 
;

test-suite my_suite
:
      [ run test_ct_hash.cpp ]
      [ run test_Eigen.cpp ]
;
explicit my_suite ; # ! explicit can be used without declaration - introduced first !






# The six rules ALWAYS, LEAVES, NOCARE, NOTFILE, NOUPDATE, and TEMPORARY modify the dependency graph so that bjam treats the targets differently during its target binding phase.




# This Jamfile requires boost-build v2 to build.
# The version shipped with boost 1.34.0

#import modules ;
#import os ;
#import errors ;
#import feature : feature ;
#import package ;
#import virtual-target ;

#if ! $(BOOST_ROOT)
#{
#    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
#}
#BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;


#CXXFLAGS = [ modules.peek : CXXFLAGS ] ;
#LDFLAGS = [ modules.peek : LDFLAGS ] ;

#ECHO "BOOST_ROOT =" $(BOOST_ROOT) ;
#ECHO "OS =" [ os.name ] ;

#if $(BOOST_ROOT)
#{
#    use-project /boost : $(BOOST_ROOT) ;
#}

rule run-test ( test-name : sources + : requirements * )
{
    import testing ;
    testing.make-test run-pyd : $(sources) : $(requirements) : $(test-name) ;
}




# http://www.boost.org/build/doc/html/bbv2/builtins/raw.html

install install-app : test_dispatcher : <location>install_dir ;

notfile . : @unconditional-post-install : install-app ;
actions unconditional-post-install
{
    echo Unconditional post install run. Install is now done. 
    echo "$(<) $(>) "
}

#make file.out : file.in : @in2out ;
# Jamfile</home/raf12/develop/cpp_sandbox>.in2out bin/clang-linux-3.6.2/debug/file.out
make file.out : test_dispatcher : @in2out ;
actions in2out
{
    echo in2out $(<) $(>) 
    touch $(<)
}

notfile unconditional_action : @unconditional_action ;
actions unconditional_action
{
    echo "running unconditional_action, warning! might be bash shell SH or winowz cmd line BAT"
    touch "run_unconditional_action"
}
#<host-os>linux,<target-os>linux:<source>abc.cpp
#if $(UNIX)
#{ #TODO write in python
#   #./write_version.sh
#}

import property-set ;
notfile print_toolset : @print_toolset_version ;
rule print_toolset_version ( t : : properties * )
{
    local ps = [ property-set.create $(properties) ] ;
    local toolset = [ $(ps).get <toolset> ] ;
    echo Toolset is $(toolset) ;
    local version = [ $(ps).get <toolset-$(toolset):version> ] ;
    echo Toolset version is $(version) ;
}

ECHO "You may want to run super-lint:      scan-build bjam" ;

