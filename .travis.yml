# Build matrix / environment variable are explained on:
# http://about.travis-ci.org/docs/user/build-configuration/
# This file can be validated on:
# http://lint.travis-ci.org/

#This job is running on container-based infrastructure, which does not allow use of 'sudo', setuid and setguid executables.
#If you require sudo, add 'sudo: required' to your .travis.yml
#See https://docs.travis-ci.com/user/workers/container-based-infrastructure/ for details.

sudo: required # if false then gcc-6 and clang++-3.8 not installed
dist: trusty # newer version did not work: xenial 
#os: osx # if [ $TRAVIS_OS_NAME == osx ];
#osx_image: xcode8

cache:
  ccache: true
  directories:
  - boost
  - EIGEN
  - $HOME/.ccache

language: cpp

env:
  global:
  - CTEST_OUTPUT_ON_FAILURE=1

matrix:
 fast_finish: true
 os:
  - linux
  - osx # toolset=darwin
 include:
   - os: linux
     #dist: trusty
     #sudo: required
 - compiler: gcc
   addons:
     apt:
       sources:
         - ubuntu-toolchain-r-test
       packages:
         - g++-6
   env: CVER=6
 - compiler: clang
   addons:
     apt:
       sources:
         - ubuntu-toolchain-r-test
         - llvm-toolchain-precise-3.8
       packages:
         - clang++-3.8
         - g++-6 # clang uses some headers from gcc
   env: CVER=3.8

branches:
  only:
    - master
    - develop

addons:
  apt:
    # List of whitelisted in travis packages for ubuntu-precise can be found here:
    #   https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise
    # List of whitelisted in travis apt-sources:
    #   https://github.com/travis-ci/apt-source-whitelist/blob/master/ubuntu.json
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.8 # TODO ${CLANG_VER}
    #- llvm-toolchain-precise-3.9 # TODO ${CLANG_VER}
    packages: 
    #- gcc-6 # TODO ${GCC_VER}
    #- g++-6 # TODO ${GCC_VER}
    #- gcc-7 # TODO ${GCC_VER}
    #- g++-7 # TODO ${GCC_VER}
    #- clang-3.8 # TODO ${CLANG_VER}
    - clang-format-3.8 # TODO ${CLANG_VER}
    - clang-tidy-3.8 # TODO ${CLANG_VER}
    - lcov
    - valgrind
    - cmake
    - cmake-data
    - libopenmpi-dev
    - gcovr
    #- python3.5
    #- clang-3.9 # TODO ${CLANG_VER}

before_install:

install: 
  # install lcov to coveralls conversion + upload tool
  - gem install coveralls-lcov

before_script:
  #- if [ $TRAVIS_OS_NAME == osx ]; then export GCC_VER= ; export CLANG_VER= ; fi # empty version
  - ./travis_shallow-clone-and-bootstrap master https://github.com/boostorg/boost.git boost ${CVER}
  
script:
  - touch Jamroot
  #- BOOST_ROOT=./boost ./boost/bjam -d2 -j8 toolset=clang
  #- if [ ! $TRAVIS_OS_NAME == osx ]; then BOOST_ROOT=./boost ./boost/bjam -d2 -j8 toolset=gcc ; else BOOST_ROOT=./boost ./boost/bjam -d2 -j8 toolset=clang ; fi
  - BOOST_ROOT=./boost ./boost/bjam -d2 -j8 toolset=${CC}
  

after_success:
  - "echo 'RLD: SUCCESS'"
  - clang-tidy-3.8 src/* # TODO does not work
  - BOOST_ROOT=./boost scan-build-3.8 ./boost/bjam -j8 toolset=clang variant=release 
  # produce coveralls data 
  - lcov --directory . --zerocounters
  - BOOST_ROOT=./boost ./boost/bjam -j8 toolset=clang variant=coverage
  - lcov --directory . --capture --output-file coverage.info # capture coverage info
  - lcov --remove coverage.info 'tests/*' '/usr/*' '/boost/*' '/EIGEN/*' --output-file coverage.info # filter out system and test code
  - lcov --list coverage.info # debug before upload
  - coveralls-lcov coverage.info # uploads to coveralls  # --repo-token ${COVERALLS_TOKEN}

after_failure:
  - bash -c "echo 'RLD: failed\!'"
  
notifications:
  email:
    on_success: change
    on_failure: change # always

