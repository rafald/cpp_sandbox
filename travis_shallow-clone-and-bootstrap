#!/bin/bash

# $1: master 
# $2: https://github.com/boostorg/boost.git 
# $3: boost 
# $4: ${CXX} 
# $5: ${CVER}

set -e

function full_clone() {
#    for i in $(sed -n 's/\[submodule "\(.*\)"\]/\1/p' .gitmodules | sort); do
#        spath=$(git config -f .gitmodules --get submodule.$i.path)
#        surl=$(git config -f .gitmodules --get submodule.$i.url)
#        git clone --depth 1 --branch $1 $surl $spath
#    done
#    git submodule update
    git submodule update --init --recursive
}

# $1 g++ binary
# $2 version #
function create_user_config() {
    # create brand new
    UCFILE=./tools/build/src/user-config.jam
    echo > ${UCFILE}

    # required by .travis.yml but normally in user_config.jam
    echo "import boost ;" >> ${UCFILE}
    echo "boost.use-project ;" >> ${UCFILE}

    echo "using ${1} : ${2} : /usr/bin/${1}-${2} ;" >> ${UCFILE}

    cat ${UCFILE}
}

function partial_clone() {
    for mod in chrono config function mpl ratio predef preprocessor smart_ptr system test throw_exception timer type_traits utility ;
    do
        git clone --depth 1 --branch $1 https://github.com/boostorg/${mod}.git libs/${mod}
    done
    
    git clone --depth 1 --branch $1 https://github.com/boostorg/build.git tools/build
    git clone --depth 1 --branch $1 https://github.com/boostorg/inspect.git tools/inspect
}

if [ ! -d ${3}/.git ] ; then
    git clone --depth 1 --branch $1 $2 $3
    pushd $3
    git submodule init
    full_clone $1
#    partial_clone $1
    
    echo ${4} ${5} 
    create_user_config ${4} ${5}
    ./bootstrap.sh --with-toolset=${4} ; ./b2 headers
    ./b2 variant=debug chrono ; ./b2 variant=debug system ; ./b2 variant=debug unit_test_framework 
    
    popd
else
    echo "$3 dir already present"
fi

if [ ! -d EIGEN/.hg ] ; then
    hg clone https://bitbucket.org/eigen/eigen EIGEN
fi
